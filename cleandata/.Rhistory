ls
install.packages("KernSmooth")
library(KernSmooth)
320283198603304824 - 320206201012072618
320283198603304824L - 320206201012072618
x <- 4L
x
class(x)
x <- c("a", 4, T)
x
class(x)
a = c( 1, 3, 4)
b = c( 3 , 6, 9)
rbin(a, b)
rbind(a, b)
x <- list( 3, "a", "b",T)
x
x[[2]]
x = 1:4
x
x <- 1:4
x
y <- 2
x + y
pwd()
ls()
pwd
read.csv("d:/github/datasciencecoursera/hw1_data.csv")
data <- read.csv("d:/github/datasciencecoursera/hw1_data.csv")
data[1:10]
data
data[1:4,]
class(data)
nrows(data)
nrow(data)
data[152:153,]
data$Ozone
data$Ozone[3]
data$Ozone[47]
is.na(data)
b = is.na(data)
size(b)
class(b)
nrow(b)
sum(b)
sum(!is.na(data))
sum(data)
data
sum(!is.na(data))
a = c(3, 4, na, 5)
a = c(3, 4, NA, 5)
a
sum(a)
sum(is.na(apply(array, margin, ...)))
sum(is.na(a))
sum(!is.na(a))
sum(!is.na(data))
sum(is.na(data))
sum(is.na(data$Ozone))
data$Ozone
zone2 <- data$Ozone
zone2[ zone2 != NA]
zone2[ is.na(zone2)]
zone2[ !is.na(zone2)]
zone3 <- zone2[ !is.na(zone2)]
zone2
sum(zone3)
sum(zone3) / nrow(zone3)
ncol(zone2)
size(zone3)
length(zone3)
sum(zone3)/length(zone3)
mean(zone3)
data[1:10,]
data2 <- data[1:10,]
data2[data2 > 2]
length(data2[data2 > 2])
nrow(data2[data2 > 2])
data2[data2 > 2, exact:FLASE]
data
data
data2
data2[data2>10]
data2[data2>10] <- 0
data2
data2[data2>10 & data2$Wind < 8] <- 0
data
data
data2
data2[data2$Wind < 8] <- 0
data2$Wind[ data2$Wind < 8] <- 0
data2
data2 <- data[data>32,]
data2
data2 <- data[data[,]>32,]
data
data2 <- data[data[,]>31,]
data2
data
data[data[,1]>150,]
data[data[,1]==150,]
data
head(data)
data2 = data[1:6,]
data
data
data2
data2[,] > 20
data2[data2[,] > 20]
data2[data2[,] > 20, ]
data2[data2[,] > 20]
data2[,] > 20
data2[data2[,] > 20, byrow=T]
subset(data, Temp > 90)
subset(data, Temp > 90 & data > 31)
subset(data, Temp > 90 & data$Ozone > 31)
subset(data, Temp > 90 & data$ > 31)
subset(data, Temp > 90 & data[,] > 31)
data
subset(data, Temp > 90 & Ozone > 31)
b = subset(data, Temp > 90 & Ozone > 31)
class(b)
b
mean(b)
mean(b$Solar.R)
b = subset(data, Temp = 6)
b
b = subset(data, Month=6)
mean(b)
mean(b$Temp)
b
head(b)
b = subset(data, Month=6)
data
head(data)
subset(data, Month=6)
subset(data, Month==6)
b = subset(data, Month==6)
length(b$Temp)
b
mean(b$Temp)
b = subset(data, Month==5); max(b$Ozone)
b = subset(data, Month==5);
b
max(b)
max(b$Ozone)
b$Ozone
z = b$Ozone
z
z[z>32,]
z[z>32]
z[!is.na(z)]
max(z[!is.na(z)])
data
na.omit(data)
b = na.omit(data)
dump(b)
b
nrow(b)
sum(data.na)
sum(data.has.na)
data.has.na <- apply(final, 1, function(x){ayn(is.na(x))})
data.has.na <- apply(data.has.na, 1, function(x){ayn(is.na(x))})
install.packages("swirl")
packageVersion("swirl")
load(swirl)
library(swirl)
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
bye()
swirl()
?gathe
?gather
getwd()
setwd(""D:/github/datasciencecoursera/cleandata)
setwd(""D:/github/datasciencecoursera/cleandata"")
setwd("D:/github/datasciencecoursera/cleandata)
""
setwd("D:/github/datasciencecoursera/cleandata")
swirl()
library(swirl)
swirl()
?gather
play()
head(students)
nxt()
gather(students, sex, count, -grade)
students2
class(students2)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
getwd()
students2
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5")
?parse_number
?mutate
submit()
students4
?select
submit()
?unique
submit()
submit()
submit()
submit()
passed
failed
?mutate
mutate(passed, status="passed")
passed %>% mutate(status="passed")
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
?bind_rows
bind_rows(passed, failed, .id = id)
bind_rows(passed, failed, .id = "id")
passed
failed
bind_rows(passed, failed)
play()
students2
source("script1.R")
#
students2 %>%
gather(sex_class, count, -grade) %>%
separate(sex_class , c("sex", "class")) %>%
print
student3
students3
students3 %>%
gather(class , grade, class1: class5, na.rm = TRUE) %>%
print
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , grade) %>%
print
tab <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE)
tab
spread(tab, test, grade)
tab <- spread(tab, test, grade)
tab
tab %>% mutate(class = parse_number(class)
)
tab %>% mutate(class = parse_number(class))
students
students4
students4 %>% select(id, name, sex)
unique( students4 %>% select(id, name, sex) )
students4 %>% select(id, name, sex) %>% unique()
history
history()
passed
failed
bind_rows(passed, failed)
nxt()
sat
class(sat)
?contains
tab <- students2 %>%
gather(sex_class, count, -grade)
tab
submit()
?group_by
tab <- sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))
tab
tab %>% group_by(part, sex)
tab %>% group_by(part, sex)
submit()
submit()
swirl()
path2csv
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
cran
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", country <= "3.0.2")
filter(cran, country == "IN", version <= "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size / 2^20)
mutate(cran3, size_gb= size / 2^30)
mutate(cran3, size_mb = size / 2^20, size_gb= size / 2^30)
mutate(cran3, size_mb = size / 2^20, size_gb= size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
n(by_package)
?n
submit()
pack_sum
?quantile
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted <- arrange(top_counts, desc(count)))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
bye()
which(1:5)
getwd()
data <- read.csv("house.csv")
head(data)
data <- tbl_df(data)
data
house <- select(data, ACR, AGS)
house
filter(house, ACR>=3, AGS>=6)
house[house$ACR>=3 & house$AGS>=6]
house[house$ACR>=3 & house$AGS>=6, ]
which(house[house$ACR>=3 & house$AGS>=6, ])
house %>% mutate(logic=ACR>=3, AGS>=6)
tmp1 <- house %>% mutate(logic=ACR>=3, AGS>=6)
which(tmp1$logic)
tmp1 <- house %>% mutate(logic=ACR>=3 & AGS>=6)
tmp1
tmp1 <- house %>% mutate(logic= !is.na(ACR) & !is.na(AGS) & ACR>=3 & AGS>=6)
tmp1
which(tmp1$logic)
history
?readJPEG
library(jpeg)
install.packages("jpeg")
library(jpeg)
?readJPEG
data <- readJPEG("jeff.jpg", native = TRUE)
dim(data)
class(data)
data[30]
data[80]
str(data)
data[30, 80]
data$nativeRaster[30]
data$nativeRaster
data[30]
data <- readJPEG("jeff.jpg")
data[30]
data <- readJPEG("jeff.jpg",native = FALSE)
data[30]
data <- readJPEG("jeff.jpg",native = TRUE)
data[80]
data[30]
length(data)
180*180
gdp <- read.csv("GDP.csv")
edu <- read.csv("EDU.csv")
gdp <- tbl_df(gdp)
edu <- tbl_df(edu)
gdp
edu
gdp <- read.csv("GDP.csv")
edu <- tbl_df(edu)
gdp <- read.csv("GDP.csv")
EDU
edu
gdp
gdp
class(gdp)
gdp <- table_df(gdp)
gdp <- tbl_df(gdp)
gdp
class(gdp)
edu
inner_join(edu, gdp, c("CountryCode", "NAME"))
inner_join(edu, gdp, by = c("CountryCode", "NAME"))
inner_join(edu, gdp, by = c("CountryCode" = "NAME"))
gdp
edu
inner_join(edu, gdp, by = c("CountryCode" = "NAME"))
arrange(gdp, Ranking)
View(gdp)
View(desc(gdp)
arrange(gdp, desc(Ranking))
gdp(13)
gdp[13,]
gdp_t <- arrange(gdp, desc(Ranking))
View(gdp_t)
gdp_t[13,]
gdp <- read.csv("gdp.csv")
gdp <- tbl_df(gdp)
gdp
gdp %>% arrange(desc(Ranking))
gdp %>% arrange(desc(Ranking)) %>% View()
joined <- inner_join(gdp, edu, by=c("Name"="CountryCode"))
joined <- inner_join(gdp, edu, by=c("CountryCode"="Name"))
joined
joined <- inner_join(gdp, edu, by=c("CountryCode", "Name"))
edu
gdp
joined <- inner_join(gdp, edu, by=c("NAME"="CountryCode"))
joined
edu
gdp
view(gdp)
View(gdp)
View(edu)
